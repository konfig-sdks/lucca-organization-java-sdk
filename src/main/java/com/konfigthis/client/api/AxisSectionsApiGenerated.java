/*
 * Organization structure API
 * Welcome on the documentation for the Organization Structure API 
 *
 * The version of the OpenAPI document: 1.0
 * Contact: developers@lucca.fr
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.AxisSection;
import com.konfigthis.client.model.AxisSectionTreeless;
import com.konfigthis.client.model.AxissectionsCreateNewAxisSectionResponse;
import com.konfigthis.client.model.AxissectionsGetByIdResponse;
import com.konfigthis.client.model.AxissectionsList200Response;
import com.konfigthis.client.model.AxissectionsListResponse;
import com.konfigthis.client.model.AxissectionsUpdateByIdResponse;
import java.net.URI;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class AxisSectionsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AxisSectionsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public AxisSectionsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        if (apiClient.getAuthorization() == null) {
            throw new IllegalArgumentException("\"Authorization\" is required but no API key was provided. Please set \"Authorization\" with ApiClient#setAuthorization(String).");
        }
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createNewAxisSectionCall(AxisSection axisSection, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = axisSection;

        // create path and map variables
        String localVarPath = "/api/v3/axisSections";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNewAxisSectionValidateBeforeCall(AxisSection axisSection, final ApiCallback _callback) throws ApiException {
        return createNewAxisSectionCall(axisSection, _callback);

    }


    private ApiResponse<AxissectionsCreateNewAxisSectionResponse> createNewAxisSectionWithHttpInfo(AxisSection axisSection) throws ApiException {
        okhttp3.Call localVarCall = createNewAxisSectionValidateBeforeCall(axisSection, null);
        Type localVarReturnType = new TypeToken<AxissectionsCreateNewAxisSectionResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createNewAxisSectionAsync(AxisSection axisSection, final ApiCallback<AxissectionsCreateNewAxisSectionResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNewAxisSectionValidateBeforeCall(axisSection, _callback);
        Type localVarReturnType = new TypeToken<AxissectionsCreateNewAxisSectionResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateNewAxisSectionRequestBuilder {
        private Object description;
        private Integer id;
        private String name;
        private URI url;
        private String code;
        private String multilingualName;
        private Object ownerId;
        private Object startOn;
        private Object endOn;
        private Boolean active;
        private Integer axisId;
        private List<AxisSectionTreeless> parentAxisSections;
        private List<AxisSectionTreeless> childrenAxisSections;

        private CreateNewAxisSectionRequestBuilder() {
        }

        /**
         * Set description
         * @param description  (optional)
         * @return CreateNewAxisSectionRequestBuilder
         */
        public CreateNewAxisSectionRequestBuilder description(Object description) {
            this.description = description;
            return this;
        }
        
        /**
         * Set id
         * @param id  (optional)
         * @return CreateNewAxisSectionRequestBuilder
         */
        public CreateNewAxisSectionRequestBuilder id(Integer id) {
            this.id = id;
            return this;
        }
        
        /**
         * Set name
         * @param name  (optional)
         * @return CreateNewAxisSectionRequestBuilder
         */
        public CreateNewAxisSectionRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Set url
         * @param url  (optional)
         * @return CreateNewAxisSectionRequestBuilder
         */
        public CreateNewAxisSectionRequestBuilder url(URI url) {
            this.url = url;
            return this;
        }
        
        /**
         * Set code
         * @param code  (optional)
         * @return CreateNewAxisSectionRequestBuilder
         */
        public CreateNewAxisSectionRequestBuilder code(String code) {
            this.code = code;
            return this;
        }
        
        /**
         * Set multilingualName
         * @param multilingualName  (optional)
         * @return CreateNewAxisSectionRequestBuilder
         */
        public CreateNewAxisSectionRequestBuilder multilingualName(String multilingualName) {
            this.multilingualName = multilingualName;
            return this;
        }
        
        /**
         * Set ownerId
         * @param ownerId  (optional)
         * @return CreateNewAxisSectionRequestBuilder
         */
        public CreateNewAxisSectionRequestBuilder ownerId(Object ownerId) {
            this.ownerId = ownerId;
            return this;
        }
        
        /**
         * Set startOn
         * @param startOn  (optional)
         * @return CreateNewAxisSectionRequestBuilder
         */
        public CreateNewAxisSectionRequestBuilder startOn(Object startOn) {
            this.startOn = startOn;
            return this;
        }
        
        /**
         * Set endOn
         * @param endOn  (optional)
         * @return CreateNewAxisSectionRequestBuilder
         */
        public CreateNewAxisSectionRequestBuilder endOn(Object endOn) {
            this.endOn = endOn;
            return this;
        }
        
        /**
         * Set active
         * @param active  (optional, default to true)
         * @return CreateNewAxisSectionRequestBuilder
         */
        public CreateNewAxisSectionRequestBuilder active(Boolean active) {
            this.active = active;
            return this;
        }
        
        /**
         * Set axisId
         * @param axisId  (optional)
         * @return CreateNewAxisSectionRequestBuilder
         */
        public CreateNewAxisSectionRequestBuilder axisId(Integer axisId) {
            this.axisId = axisId;
            return this;
        }
        
        /**
         * Set parentAxisSections
         * @param parentAxisSections  (optional)
         * @return CreateNewAxisSectionRequestBuilder
         */
        public CreateNewAxisSectionRequestBuilder parentAxisSections(List<AxisSectionTreeless> parentAxisSections) {
            this.parentAxisSections = parentAxisSections;
            return this;
        }
        
        /**
         * Set childrenAxisSections
         * @param childrenAxisSections  (optional)
         * @return CreateNewAxisSectionRequestBuilder
         */
        public CreateNewAxisSectionRequestBuilder childrenAxisSections(List<AxisSectionTreeless> childrenAxisSections) {
            this.childrenAxisSections = childrenAxisSections;
            return this;
        }
        
        /**
         * Build call for createNewAxisSection
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            AxisSection axisSection = buildBodyParams();
            return createNewAxisSectionCall(axisSection, _callback);
        }

        private AxisSection buildBodyParams() {
            AxisSection axisSection = new AxisSection();
            return axisSection;
        }

        /**
         * Execute createNewAxisSection request
         * @return AxissectionsCreateNewAxisSectionResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
         </table>
         */
        public AxissectionsCreateNewAxisSectionResponse execute() throws ApiException {
            AxisSection axisSection = buildBodyParams();
            ApiResponse<AxissectionsCreateNewAxisSectionResponse> localVarResp = createNewAxisSectionWithHttpInfo(axisSection);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createNewAxisSection request with HTTP info returned
         * @return ApiResponse&lt;AxissectionsCreateNewAxisSectionResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AxissectionsCreateNewAxisSectionResponse> executeWithHttpInfo() throws ApiException {
            AxisSection axisSection = buildBodyParams();
            return createNewAxisSectionWithHttpInfo(axisSection);
        }

        /**
         * Execute createNewAxisSection request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AxissectionsCreateNewAxisSectionResponse> _callback) throws ApiException {
            AxisSection axisSection = buildBodyParams();
            return createNewAxisSectionAsync(axisSection, _callback);
        }
    }

    /**
     * Create a new AxisSection
     * Create a new AxisSection.
     * @return CreateNewAxisSectionRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public CreateNewAxisSectionRequestBuilder createNewAxisSection() throws IllegalArgumentException {
        return new CreateNewAxisSectionRequestBuilder();
    }
    private okhttp3.Call deleteByIdCall(Integer axisSectionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v3/axisSections/{axisSectionId}"
            .replace("{" + "axisSectionId" + "}", localVarApiClient.escapeString(axisSectionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteByIdValidateBeforeCall(Integer axisSectionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'axisSectionId' is set
        if (axisSectionId == null) {
            throw new ApiException("Missing the required parameter 'axisSectionId' when calling deleteById(Async)");
        }

        return deleteByIdCall(axisSectionId, _callback);

    }


    private ApiResponse<Void> deleteByIdWithHttpInfo(Integer axisSectionId) throws ApiException {
        okhttp3.Call localVarCall = deleteByIdValidateBeforeCall(axisSectionId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteByIdAsync(Integer axisSectionId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteByIdValidateBeforeCall(axisSectionId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeleteByIdRequestBuilder {
        private final Integer axisSectionId;

        private DeleteByIdRequestBuilder(Integer axisSectionId) {
            this.axisSectionId = axisSectionId;
        }

        /**
         * Build call for deleteById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteByIdCall(axisSectionId, _callback);
        }


        /**
         * Execute deleteById request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteByIdWithHttpInfo(axisSectionId);
        }

        /**
         * Execute deleteById request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteByIdWithHttpInfo(axisSectionId);
        }

        /**
         * Execute deleteById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteByIdAsync(axisSectionId, _callback);
        }
    }

    /**
     * Delete an AxisSection by id
     * 
     * @param axisSectionId  (required)
     * @return DeleteByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public DeleteByIdRequestBuilder deleteById(Integer axisSectionId) throws IllegalArgumentException {
        if (axisSectionId == null) throw new IllegalArgumentException("\"axisSectionId\" is required but got null");
        return new DeleteByIdRequestBuilder(axisSectionId);
    }
    private okhttp3.Call getByIdCall(Integer axisSectionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v3/axisSections/{axisSectionId}"
            .replace("{" + "axisSectionId" + "}", localVarApiClient.escapeString(axisSectionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getByIdValidateBeforeCall(Integer axisSectionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'axisSectionId' is set
        if (axisSectionId == null) {
            throw new ApiException("Missing the required parameter 'axisSectionId' when calling getById(Async)");
        }

        return getByIdCall(axisSectionId, _callback);

    }


    private ApiResponse<AxissectionsGetByIdResponse> getByIdWithHttpInfo(Integer axisSectionId) throws ApiException {
        okhttp3.Call localVarCall = getByIdValidateBeforeCall(axisSectionId, null);
        Type localVarReturnType = new TypeToken<AxissectionsGetByIdResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getByIdAsync(Integer axisSectionId, final ApiCallback<AxissectionsGetByIdResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getByIdValidateBeforeCall(axisSectionId, _callback);
        Type localVarReturnType = new TypeToken<AxissectionsGetByIdResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetByIdRequestBuilder {
        private final Integer axisSectionId;

        private GetByIdRequestBuilder(Integer axisSectionId) {
            this.axisSectionId = axisSectionId;
        }

        /**
         * Build call for getById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getByIdCall(axisSectionId, _callback);
        }


        /**
         * Execute getById request
         * @return AxissectionsGetByIdResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
         </table>
         */
        public AxissectionsGetByIdResponse execute() throws ApiException {
            ApiResponse<AxissectionsGetByIdResponse> localVarResp = getByIdWithHttpInfo(axisSectionId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getById request with HTTP info returned
         * @return ApiResponse&lt;AxissectionsGetByIdResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AxissectionsGetByIdResponse> executeWithHttpInfo() throws ApiException {
            return getByIdWithHttpInfo(axisSectionId);
        }

        /**
         * Execute getById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AxissectionsGetByIdResponse> _callback) throws ApiException {
            return getByIdAsync(axisSectionId, _callback);
        }
    }

    /**
     * Get an AxisSection by id
     * Retrieve a single AxisSection by its unique identifier.
     * @param axisSectionId  (required)
     * @return GetByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public GetByIdRequestBuilder getById(Integer axisSectionId) throws IllegalArgumentException {
        if (axisSectionId == null) throw new IllegalArgumentException("\"axisSectionId\" is required but got null");
        return new GetByIdRequestBuilder(axisSectionId);
    }
    private okhttp3.Call listCall(String paging, List<Integer> id, Boolean isActive, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v3/axes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "id", id));
        }

        if (isActive != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isActive", isActive));
        }

        if (paging != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("paging", paging));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listValidateBeforeCall(String paging, List<Integer> id, Boolean isActive, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'paging' is set
        if (paging == null) {
            throw new ApiException("Missing the required parameter 'paging' when calling list(Async)");
        }

        return listCall(paging, id, isActive, _callback);

    }


    private ApiResponse<AxissectionsListResponse> listWithHttpInfo(String paging, List<Integer> id, Boolean isActive) throws ApiException {
        okhttp3.Call localVarCall = listValidateBeforeCall(paging, id, isActive, null);
        Type localVarReturnType = new TypeToken<AxissectionsListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listAsync(String paging, List<Integer> id, Boolean isActive, final ApiCallback<AxissectionsListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listValidateBeforeCall(paging, id, isActive, _callback);
        Type localVarReturnType = new TypeToken<AxissectionsListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListRequestBuilder {
        private final String paging;
        private List<Integer> id;
        private Boolean isActive;

        private ListRequestBuilder(String paging) {
            this.paging = paging;
        }

        /**
         * Set id
         * @param id Filter on axes unique identifiers. (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder id(List<Integer> id) {
            this.id = id;
            return this;
        }
        
        /**
         * Set isActive
         * @param isActive Filter on axes active status. (optional, default to true)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder isActive(Boolean isActive) {
            this.isActive = isActive;
            return this;
        }
        
        /**
         * Build call for list
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listCall(paging, id, isActive, _callback);
        }


        /**
         * Execute list request
         * @return AxissectionsListResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public AxissectionsListResponse execute() throws ApiException {
            ApiResponse<AxissectionsListResponse> localVarResp = listWithHttpInfo(paging, id, isActive);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute list request with HTTP info returned
         * @return ApiResponse&lt;AxissectionsListResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AxissectionsListResponse> executeWithHttpInfo() throws ApiException {
            return listWithHttpInfo(paging, id, isActive);
        }

        /**
         * Execute list request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AxissectionsListResponse> _callback) throws ApiException {
            return listAsync(paging, id, isActive, _callback);
        }
    }

    /**
     * List Axes
     * List all Axes satisfying query filters.
     * @param paging {offset},{limit}. Defaults to 0,1000. (required)
     * @return ListRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ListRequestBuilder list(String paging) throws IllegalArgumentException {
        if (paging == null) throw new IllegalArgumentException("\"paging\" is required but got null");
            

        return new ListRequestBuilder(paging);
    }
    private okhttp3.Call list_0Call(String paging, List<Integer> axisId, List<Integer> ownerId, Boolean active, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v3/axisSections";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (paging != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("paging", paging));
        }

        if (axisId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "axisId", axisId));
        }

        if (ownerId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "ownerId", ownerId));
        }

        if (active != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("active", active));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call list_0ValidateBeforeCall(String paging, List<Integer> axisId, List<Integer> ownerId, Boolean active, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'paging' is set
        if (paging == null) {
            throw new ApiException("Missing the required parameter 'paging' when calling list_0(Async)");
        }

        return list_0Call(paging, axisId, ownerId, active, _callback);

    }


    private ApiResponse<AxissectionsList200Response> list_0WithHttpInfo(String paging, List<Integer> axisId, List<Integer> ownerId, Boolean active) throws ApiException {
        okhttp3.Call localVarCall = list_0ValidateBeforeCall(paging, axisId, ownerId, active, null);
        Type localVarReturnType = new TypeToken<AxissectionsList200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call list_0Async(String paging, List<Integer> axisId, List<Integer> ownerId, Boolean active, final ApiCallback<AxissectionsList200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = list_0ValidateBeforeCall(paging, axisId, ownerId, active, _callback);
        Type localVarReturnType = new TypeToken<AxissectionsList200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class List0RequestBuilder {
        private final String paging;
        private List<Integer> axisId;
        private List<Integer> ownerId;
        private Boolean active;

        private List0RequestBuilder(String paging) {
            this.paging = paging;
        }

        /**
         * Set axisId
         * @param axisId Filter on the axis it belongs to. (optional)
         * @return List0RequestBuilder
         */
        public List0RequestBuilder axisId(List<Integer> axisId) {
            this.axisId = axisId;
            return this;
        }
        
        /**
         * Set ownerId
         * @param ownerId Filter on the owner managing it. (optional)
         * @return List0RequestBuilder
         */
        public List0RequestBuilder ownerId(List<Integer> ownerId) {
            this.ownerId = ownerId;
            return this;
        }
        
        /**
         * Set active
         * @param active Filter on active status. (optional, default to true)
         * @return List0RequestBuilder
         */
        public List0RequestBuilder active(Boolean active) {
            this.active = active;
            return this;
        }
        
        /**
         * Build call for list_0
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return list_0Call(paging, axisId, ownerId, active, _callback);
        }


        /**
         * Execute list_0 request
         * @return AxissectionsList200Response
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
         </table>
         */
        public AxissectionsList200Response execute() throws ApiException {
            ApiResponse<AxissectionsList200Response> localVarResp = list_0WithHttpInfo(paging, axisId, ownerId, active);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute list_0 request with HTTP info returned
         * @return ApiResponse&lt;AxissectionsList200Response&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AxissectionsList200Response> executeWithHttpInfo() throws ApiException {
            return list_0WithHttpInfo(paging, axisId, ownerId, active);
        }

        /**
         * Execute list_0 request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AxissectionsList200Response> _callback) throws ApiException {
            return list_0Async(paging, axisId, ownerId, active, _callback);
        }
    }

    /**
     * List AxisSections
     * List all AxisSections satisfying query filters.
     * @param paging {offset},{limit}. Defaults to 0,1000. (required)
     * @return List0RequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public List0RequestBuilder list_0(String paging) throws IllegalArgumentException {
        if (paging == null) throw new IllegalArgumentException("\"paging\" is required but got null");
            

        return new List0RequestBuilder(paging);
    }
    private okhttp3.Call updateByIdCall(Integer axisSectionId, AxisSection axisSection, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = axisSection;

        // create path and map variables
        String localVarPath = "/api/v3/axisSections/{axisSectionId}"
            .replace("{" + "axisSectionId" + "}", localVarApiClient.escapeString(axisSectionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateByIdValidateBeforeCall(Integer axisSectionId, AxisSection axisSection, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'axisSectionId' is set
        if (axisSectionId == null) {
            throw new ApiException("Missing the required parameter 'axisSectionId' when calling updateById(Async)");
        }

        return updateByIdCall(axisSectionId, axisSection, _callback);

    }


    private ApiResponse<AxissectionsUpdateByIdResponse> updateByIdWithHttpInfo(Integer axisSectionId, AxisSection axisSection) throws ApiException {
        okhttp3.Call localVarCall = updateByIdValidateBeforeCall(axisSectionId, axisSection, null);
        Type localVarReturnType = new TypeToken<AxissectionsUpdateByIdResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateByIdAsync(Integer axisSectionId, AxisSection axisSection, final ApiCallback<AxissectionsUpdateByIdResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateByIdValidateBeforeCall(axisSectionId, axisSection, _callback);
        Type localVarReturnType = new TypeToken<AxissectionsUpdateByIdResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateByIdRequestBuilder {
        private final Integer axisSectionId;
        private Object description;
        private Integer id;
        private String name;
        private URI url;
        private String code;
        private String multilingualName;
        private Object ownerId;
        private Object startOn;
        private Object endOn;
        private Boolean active;
        private Integer axisId;
        private List<AxisSectionTreeless> parentAxisSections;
        private List<AxisSectionTreeless> childrenAxisSections;

        private UpdateByIdRequestBuilder(Integer axisSectionId) {
            this.axisSectionId = axisSectionId;
        }

        /**
         * Set description
         * @param description  (optional)
         * @return UpdateByIdRequestBuilder
         */
        public UpdateByIdRequestBuilder description(Object description) {
            this.description = description;
            return this;
        }
        
        /**
         * Set id
         * @param id  (optional)
         * @return UpdateByIdRequestBuilder
         */
        public UpdateByIdRequestBuilder id(Integer id) {
            this.id = id;
            return this;
        }
        
        /**
         * Set name
         * @param name  (optional)
         * @return UpdateByIdRequestBuilder
         */
        public UpdateByIdRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Set url
         * @param url  (optional)
         * @return UpdateByIdRequestBuilder
         */
        public UpdateByIdRequestBuilder url(URI url) {
            this.url = url;
            return this;
        }
        
        /**
         * Set code
         * @param code  (optional)
         * @return UpdateByIdRequestBuilder
         */
        public UpdateByIdRequestBuilder code(String code) {
            this.code = code;
            return this;
        }
        
        /**
         * Set multilingualName
         * @param multilingualName  (optional)
         * @return UpdateByIdRequestBuilder
         */
        public UpdateByIdRequestBuilder multilingualName(String multilingualName) {
            this.multilingualName = multilingualName;
            return this;
        }
        
        /**
         * Set ownerId
         * @param ownerId  (optional)
         * @return UpdateByIdRequestBuilder
         */
        public UpdateByIdRequestBuilder ownerId(Object ownerId) {
            this.ownerId = ownerId;
            return this;
        }
        
        /**
         * Set startOn
         * @param startOn  (optional)
         * @return UpdateByIdRequestBuilder
         */
        public UpdateByIdRequestBuilder startOn(Object startOn) {
            this.startOn = startOn;
            return this;
        }
        
        /**
         * Set endOn
         * @param endOn  (optional)
         * @return UpdateByIdRequestBuilder
         */
        public UpdateByIdRequestBuilder endOn(Object endOn) {
            this.endOn = endOn;
            return this;
        }
        
        /**
         * Set active
         * @param active  (optional, default to true)
         * @return UpdateByIdRequestBuilder
         */
        public UpdateByIdRequestBuilder active(Boolean active) {
            this.active = active;
            return this;
        }
        
        /**
         * Set axisId
         * @param axisId  (optional)
         * @return UpdateByIdRequestBuilder
         */
        public UpdateByIdRequestBuilder axisId(Integer axisId) {
            this.axisId = axisId;
            return this;
        }
        
        /**
         * Set parentAxisSections
         * @param parentAxisSections  (optional)
         * @return UpdateByIdRequestBuilder
         */
        public UpdateByIdRequestBuilder parentAxisSections(List<AxisSectionTreeless> parentAxisSections) {
            this.parentAxisSections = parentAxisSections;
            return this;
        }
        
        /**
         * Set childrenAxisSections
         * @param childrenAxisSections  (optional)
         * @return UpdateByIdRequestBuilder
         */
        public UpdateByIdRequestBuilder childrenAxisSections(List<AxisSectionTreeless> childrenAxisSections) {
            this.childrenAxisSections = childrenAxisSections;
            return this;
        }
        
        /**
         * Build call for updateById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            AxisSection axisSection = buildBodyParams();
            return updateByIdCall(axisSectionId, axisSection, _callback);
        }

        private AxisSection buildBodyParams() {
            AxisSection axisSection = new AxisSection();
            return axisSection;
        }

        /**
         * Execute updateById request
         * @return AxissectionsUpdateByIdResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
         </table>
         */
        public AxissectionsUpdateByIdResponse execute() throws ApiException {
            AxisSection axisSection = buildBodyParams();
            ApiResponse<AxissectionsUpdateByIdResponse> localVarResp = updateByIdWithHttpInfo(axisSectionId, axisSection);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateById request with HTTP info returned
         * @return ApiResponse&lt;AxissectionsUpdateByIdResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AxissectionsUpdateByIdResponse> executeWithHttpInfo() throws ApiException {
            AxisSection axisSection = buildBodyParams();
            return updateByIdWithHttpInfo(axisSectionId, axisSection);
        }

        /**
         * Execute updateById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AxissectionsUpdateByIdResponse> _callback) throws ApiException {
            AxisSection axisSection = buildBodyParams();
            return updateByIdAsync(axisSectionId, axisSection, _callback);
        }
    }

    /**
     * Update an AxisSection by id
     * Partial or complete update to an existing AxisSection.
     * @param axisSectionId  (required)
     * @return UpdateByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public UpdateByIdRequestBuilder updateById(Integer axisSectionId) throws IllegalArgumentException {
        if (axisSectionId == null) throw new IllegalArgumentException("\"axisSectionId\" is required but got null");
        return new UpdateByIdRequestBuilder(axisSectionId);
    }
}
