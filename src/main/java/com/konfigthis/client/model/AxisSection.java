/*
 * Organization structure API
 * Welcome on the documentation for the Organization Structure API 
 *
 * The version of the OpenAPI document: 1.0
 * Contact: developers@lucca.fr
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.AxisSectionTreeless;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.net.URI;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * ## Introduction  In some application contexts, resources can be attached to analytical items. In most cases, the goal is to answer the needs of cost accounting. Axes are primarily used by Timmi Timesheet &amp; Cleemy Expenses.  Both in Timmi Timesheet and Cleemy Expense, users can enter their working hours or expenses spent on projects, tasks, work sites, cost centers, etc... These are the &#x60;AxisSection[]&#x60;, categorized in &#x60;Axis[]&#x60;. These axes can have parent-children relationships, and their axis-sections as well.  ![axis-section-diagram.png](https://stoplight.io/api/v1/projects/cHJqOjEwNjgxNg/images/y74HUrks5dQ)  ## Example  Let&#39;s take an example. Say you expect your users to enter spent working hours on each project. Each project belongs to a single client, and is divided into tasks.  In other words:  - Clients   - (1..n) Projects: each project belongs to one, and one only, client.     - (n..n) Tasks: each task belongs to one or more project(s).   Then: - Each client is an &#x60;AxisSection&#x60; in the \&quot;Clients\&quot; &#x60;Axis&#x60;. - One client has zero or more projects, which are &#x60;AxisSection[]&#x60; in the \&quot;Projects\&quot; &#x60;Axis&#x60;. A project is child to one and only one client. - One project has zero or more tasks, which are &#x60;AxisSection[]&#x60; in the \&quot;Tasks\&quot; &#x60;Axis&#x60;. Each task axis-section is child to one or more project(s) axis-sections.  The JSON representation of these axes in the API would be:  &#x60;&#x60;&#x60;json // GET /api/v3/axes HTTP/1.1 {   \&quot;data\&quot;: {     \&quot;items\&quot;: [       {         \&quot;id\&quot;: 1,         \&quot;name\&quot;: \&quot;Clients\&quot;,         \&quot;parentAxisId\&quot;: null,         \&quot;isNNRelation\&quot;: false       },       {         \&quot;id\&quot;: 2,         \&quot;name\&quot;: \&quot;Projects\&quot;,         \&quot;parentAxisId\&quot;: 1,         \&quot;isNNRelation\&quot;: false       },       {         \&quot;id\&quot;: 3,         \&quot;name\&quot;: \&quot;Tasks\&quot;,         \&quot;parentAxisId\&quot;: 2,         \&quot;isNNRelation\&quot;: true       }     ]   } } &#x60;&#x60;&#x60;  Regarding axis-sections:  &#x60;&#x60;&#x60;json // GET /api/v3/axisSections HTTP/1.1 {   \&quot;data\&quot;: {     \&quot;items\&quot;: [       {         \&quot;id\&quot;: 1,         \&quot;name\&quot;: \&quot;Acme Corporation\&quot;,         \&quot;axis\&quot;: {           \&quot;id\&quot;: 1,           \&quot;name\&quot;: \&quot;Clients\&quot;,           \&quot;parentAxisId\&quot;: null,           \&quot;isNNRelation\&quot;: false         },         \&quot;parentAxisSections\&quot;: []       },       {         \&quot;id\&quot;: 2,         \&quot;name\&quot;: \&quot;My awesome project\&quot;,         \&quot;axis\&quot;: {           \&quot;id\&quot;: 2,           \&quot;name\&quot;: \&quot;Projects\&quot;,           \&quot;parentAxisId\&quot;: 1,           \&quot;isNNRelation\&quot;: false         },         \&quot;parentAxisSections\&quot;: [           {             \&quot;id\&quot;: 1,             \&quot;axisId\&quot;: 1           }         ]       },       {         \&quot;id\&quot;: 3,         \&quot;name\&quot;: \&quot;My #2 project\&quot;,         \&quot;axis\&quot;: {           \&quot;id\&quot;: 2,           \&quot;name\&quot;: \&quot;Projects\&quot;,           \&quot;parentAxisId\&quot;: 1,           \&quot;isNNRelation\&quot;: false         },         \&quot;parentAxisSections\&quot;: [           {             \&quot;id\&quot;: 1,             \&quot;axisId\&quot;: 1           }         ]       },       {         \&quot;id\&quot;: 4,         \&quot;name\&quot;: \&quot;User tests\&quot;,         \&quot;axis\&quot;: {           \&quot;id\&quot;: 3,           \&quot;name\&quot;: \&quot;Tasks\&quot;,           \&quot;parentAxisId\&quot;: 2,           \&quot;isNNRelation\&quot;: true         },         \&quot;parentAxisSections\&quot;: [           {             \&quot;id\&quot;: 2,             \&quot;axisId\&quot;: 2           },           {             \&quot;id\&quot;: 3,             \&quot;axisId\&quot;: 2           }         ]       }     ]   } } &#x60;&#x60;&#x60; ## Fields
 */
@ApiModel(description = "## Introduction  In some application contexts, resources can be attached to analytical items. In most cases, the goal is to answer the needs of cost accounting. Axes are primarily used by Timmi Timesheet & Cleemy Expenses.  Both in Timmi Timesheet and Cleemy Expense, users can enter their working hours or expenses spent on projects, tasks, work sites, cost centers, etc... These are the `AxisSection[]`, categorized in `Axis[]`. These axes can have parent-children relationships, and their axis-sections as well.  ![axis-section-diagram.png](https://stoplight.io/api/v1/projects/cHJqOjEwNjgxNg/images/y74HUrks5dQ)  ## Example  Let's take an example. Say you expect your users to enter spent working hours on each project. Each project belongs to a single client, and is divided into tasks.  In other words:  - Clients   - (1..n) Projects: each project belongs to one, and one only, client.     - (n..n) Tasks: each task belongs to one or more project(s).   Then: - Each client is an `AxisSection` in the \"Clients\" `Axis`. - One client has zero or more projects, which are `AxisSection[]` in the \"Projects\" `Axis`. A project is child to one and only one client. - One project has zero or more tasks, which are `AxisSection[]` in the \"Tasks\" `Axis`. Each task axis-section is child to one or more project(s) axis-sections.  The JSON representation of these axes in the API would be:  ```json // GET /api/v3/axes HTTP/1.1 {   \"data\": {     \"items\": [       {         \"id\": 1,         \"name\": \"Clients\",         \"parentAxisId\": null,         \"isNNRelation\": false       },       {         \"id\": 2,         \"name\": \"Projects\",         \"parentAxisId\": 1,         \"isNNRelation\": false       },       {         \"id\": 3,         \"name\": \"Tasks\",         \"parentAxisId\": 2,         \"isNNRelation\": true       }     ]   } } ```  Regarding axis-sections:  ```json // GET /api/v3/axisSections HTTP/1.1 {   \"data\": {     \"items\": [       {         \"id\": 1,         \"name\": \"Acme Corporation\",         \"axis\": {           \"id\": 1,           \"name\": \"Clients\",           \"parentAxisId\": null,           \"isNNRelation\": false         },         \"parentAxisSections\": []       },       {         \"id\": 2,         \"name\": \"My awesome project\",         \"axis\": {           \"id\": 2,           \"name\": \"Projects\",           \"parentAxisId\": 1,           \"isNNRelation\": false         },         \"parentAxisSections\": [           {             \"id\": 1,             \"axisId\": 1           }         ]       },       {         \"id\": 3,         \"name\": \"My #2 project\",         \"axis\": {           \"id\": 2,           \"name\": \"Projects\",           \"parentAxisId\": 1,           \"isNNRelation\": false         },         \"parentAxisSections\": [           {             \"id\": 1,             \"axisId\": 1           }         ]       },       {         \"id\": 4,         \"name\": \"User tests\",         \"axis\": {           \"id\": 3,           \"name\": \"Tasks\",           \"parentAxisId\": 2,           \"isNNRelation\": true         },         \"parentAxisSections\": [           {             \"id\": 2,             \"axisId\": 2           },           {             \"id\": 3,             \"axisId\": 2           }         ]       }     ]   } } ``` ## Fields")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class AxisSection {
  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private Object description = null;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private URI url;

  public static final String SERIALIZED_NAME_CODE = "code";
  @SerializedName(SERIALIZED_NAME_CODE)
  private String code;

  public static final String SERIALIZED_NAME_MULTILINGUAL_NAME = "multilingualName";
  @SerializedName(SERIALIZED_NAME_MULTILINGUAL_NAME)
  private String multilingualName;

  public static final String SERIALIZED_NAME_OWNER_ID = "ownerId";
  @SerializedName(SERIALIZED_NAME_OWNER_ID)
  private Object ownerId = null;

  public static final String SERIALIZED_NAME_START_ON = "startOn";
  @SerializedName(SERIALIZED_NAME_START_ON)
  private Object startOn = null;

  public static final String SERIALIZED_NAME_END_ON = "endOn";
  @SerializedName(SERIALIZED_NAME_END_ON)
  private Object endOn = null;

  public static final String SERIALIZED_NAME_ACTIVE = "active";
  @SerializedName(SERIALIZED_NAME_ACTIVE)
  private Boolean active = true;

  public static final String SERIALIZED_NAME_AXIS_ID = "axisId";
  @SerializedName(SERIALIZED_NAME_AXIS_ID)
  private Integer axisId;

  public static final String SERIALIZED_NAME_PARENT_AXIS_SECTIONS = "parentAxisSections";
  @SerializedName(SERIALIZED_NAME_PARENT_AXIS_SECTIONS)
  private List<AxisSectionTreeless> parentAxisSections = null;

  public static final String SERIALIZED_NAME_CHILDREN_AXIS_SECTIONS = "childrenAxisSections";
  @SerializedName(SERIALIZED_NAME_CHILDREN_AXIS_SECTIONS)
  private List<AxisSectionTreeless> childrenAxisSections = null;

  public AxisSection() {
  }

  
  public AxisSection(
     String name, 
     URI url, 
     Object startOn
  ) {
    this();
    this.name = name;
    this.url = url;
    this.startOn = startOn;
  }

  public AxisSection description(Object description) {
    
    
    
    
    this.description = description;
    return this;
  }

   /**
   * Get description
   * @return description
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Object getDescription() {
    return description;
  }


  public void setDescription(Object description) {
    
    
    
    this.description = description;
  }


  public AxisSection id(Integer id) {
    if (id != null && id < 1) {
      throw new IllegalArgumentException("Invalid value for id. Must be greater than or equal to 1.");
    }
    
    
    
    this.id = id;
    return this;
  }

   /**
   * Get id
   * minimum: 1
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getId() {
    return id;
  }


  public void setId(Integer id) {
    if (id != null && id < 1) {
      throw new IllegalArgumentException("Invalid value for id. Must be greater than or equal to 1.");
    }
    
    
    this.id = id;
  }


   /**
   * Get name
   * @return name
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getName() {
    return name;
  }




   /**
   * Get url
   * @return url
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public URI getUrl() {
    return url;
  }




  public AxisSection code(String code) {
    
    
    
    
    this.code = code;
    return this;
  }

   /**
   * Get code
   * @return code
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public String getCode() {
    return code;
  }


  public void setCode(String code) {
    
    
    
    this.code = code;
  }


  public AxisSection multilingualName(String multilingualName) {
    
    
    
    
    this.multilingualName = multilingualName;
    return this;
  }

   /**
   * Get multilingualName
   * @return multilingualName
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public String getMultilingualName() {
    return multilingualName;
  }


  public void setMultilingualName(String multilingualName) {
    
    
    
    this.multilingualName = multilingualName;
  }


  public AxisSection ownerId(Object ownerId) {
    
    
    
    
    this.ownerId = ownerId;
    return this;
  }

   /**
   * Get ownerId
   * @return ownerId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Object getOwnerId() {
    return ownerId;
  }


  public void setOwnerId(Object ownerId) {
    
    
    
    this.ownerId = ownerId;
  }


   /**
   * Get startOn
   * @return startOn
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Object getStartOn() {
    return startOn;
  }




  public AxisSection endOn(Object endOn) {
    
    
    
    
    this.endOn = endOn;
    return this;
  }

   /**
   * Get endOn
   * @return endOn
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Object getEndOn() {
    return endOn;
  }


  public void setEndOn(Object endOn) {
    
    
    
    this.endOn = endOn;
  }


  public AxisSection active(Boolean active) {
    
    
    
    
    this.active = active;
    return this;
  }

   /**
   * Get active
   * @return active
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "true", value = "")

  public Boolean getActive() {
    return active;
  }


  public void setActive(Boolean active) {
    
    
    
    this.active = active;
  }


  public AxisSection axisId(Integer axisId) {
    
    
    
    
    this.axisId = axisId;
    return this;
  }

   /**
   * Get axisId
   * @return axisId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Integer getAxisId() {
    return axisId;
  }


  public void setAxisId(Integer axisId) {
    
    
    
    this.axisId = axisId;
  }


  public AxisSection parentAxisSections(List<AxisSectionTreeless> parentAxisSections) {
    
    
    
    
    this.parentAxisSections = parentAxisSections;
    return this;
  }

  public AxisSection addParentAxisSectionsItem(AxisSectionTreeless parentAxisSectionsItem) {
    if (this.parentAxisSections == null) {
      this.parentAxisSections = new ArrayList<>();
    }
    this.parentAxisSections.add(parentAxisSectionsItem);
    return this;
  }

   /**
   * Get parentAxisSections
   * @return parentAxisSections
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<AxisSectionTreeless> getParentAxisSections() {
    return parentAxisSections;
  }


  public void setParentAxisSections(List<AxisSectionTreeless> parentAxisSections) {
    
    
    
    this.parentAxisSections = parentAxisSections;
  }


  public AxisSection childrenAxisSections(List<AxisSectionTreeless> childrenAxisSections) {
    
    
    
    
    this.childrenAxisSections = childrenAxisSections;
    return this;
  }

  public AxisSection addChildrenAxisSectionsItem(AxisSectionTreeless childrenAxisSectionsItem) {
    if (this.childrenAxisSections == null) {
      this.childrenAxisSections = new ArrayList<>();
    }
    this.childrenAxisSections.add(childrenAxisSectionsItem);
    return this;
  }

   /**
   * Get childrenAxisSections
   * @return childrenAxisSections
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<AxisSectionTreeless> getChildrenAxisSections() {
    return childrenAxisSections;
  }


  public void setChildrenAxisSections(List<AxisSectionTreeless> childrenAxisSections) {
    
    
    
    this.childrenAxisSections = childrenAxisSections;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the AxisSection instance itself
   */
  public AxisSection putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AxisSection axisSection = (AxisSection) o;
    return Objects.equals(this.description, axisSection.description) &&
        Objects.equals(this.id, axisSection.id) &&
        Objects.equals(this.name, axisSection.name) &&
        Objects.equals(this.url, axisSection.url) &&
        Objects.equals(this.code, axisSection.code) &&
        Objects.equals(this.multilingualName, axisSection.multilingualName) &&
        Objects.equals(this.ownerId, axisSection.ownerId) &&
        Objects.equals(this.startOn, axisSection.startOn) &&
        Objects.equals(this.endOn, axisSection.endOn) &&
        Objects.equals(this.active, axisSection.active) &&
        Objects.equals(this.axisId, axisSection.axisId) &&
        Objects.equals(this.parentAxisSections, axisSection.parentAxisSections) &&
        Objects.equals(this.childrenAxisSections, axisSection.childrenAxisSections)&&
        Objects.equals(this.additionalProperties, axisSection.additionalProperties);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, id, name, url, code, multilingualName, ownerId, startOn, endOn, active, axisId, parentAxisSections, childrenAxisSections, additionalProperties);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AxisSection {\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    code: ").append(toIndentedString(code)).append("\n");
    sb.append("    multilingualName: ").append(toIndentedString(multilingualName)).append("\n");
    sb.append("    ownerId: ").append(toIndentedString(ownerId)).append("\n");
    sb.append("    startOn: ").append(toIndentedString(startOn)).append("\n");
    sb.append("    endOn: ").append(toIndentedString(endOn)).append("\n");
    sb.append("    active: ").append(toIndentedString(active)).append("\n");
    sb.append("    axisId: ").append(toIndentedString(axisId)).append("\n");
    sb.append("    parentAxisSections: ").append(toIndentedString(parentAxisSections)).append("\n");
    sb.append("    childrenAxisSections: ").append(toIndentedString(childrenAxisSections)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("description");
    openapiFields.add("id");
    openapiFields.add("name");
    openapiFields.add("url");
    openapiFields.add("code");
    openapiFields.add("multilingualName");
    openapiFields.add("ownerId");
    openapiFields.add("startOn");
    openapiFields.add("endOn");
    openapiFields.add("active");
    openapiFields.add("axisId");
    openapiFields.add("parentAxisSections");
    openapiFields.add("childrenAxisSections");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("code");
    openapiRequiredFields.add("multilingualName");
    openapiRequiredFields.add("axisId");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to AxisSection
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!AxisSection.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AxisSection is not found in the empty JSON string", AxisSection.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AxisSection.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("url") != null && !jsonObj.get("url").isJsonNull()) && !jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
      if (!jsonObj.get("code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("code").toString()));
      }
      if (!jsonObj.get("multilingualName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `multilingualName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("multilingualName").toString()));
      }
      if (jsonObj.get("parentAxisSections") != null && !jsonObj.get("parentAxisSections").isJsonNull()) {
        JsonArray jsonArrayparentAxisSections = jsonObj.getAsJsonArray("parentAxisSections");
        if (jsonArrayparentAxisSections != null) {
          // ensure the json data is an array
          if (!jsonObj.get("parentAxisSections").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `parentAxisSections` to be an array in the JSON string but got `%s`", jsonObj.get("parentAxisSections").toString()));
          }

          // validate the optional field `parentAxisSections` (array)
          for (int i = 0; i < jsonArrayparentAxisSections.size(); i++) {
            AxisSectionTreeless.validateJsonObject(jsonArrayparentAxisSections.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("childrenAxisSections") != null && !jsonObj.get("childrenAxisSections").isJsonNull()) {
        JsonArray jsonArraychildrenAxisSections = jsonObj.getAsJsonArray("childrenAxisSections");
        if (jsonArraychildrenAxisSections != null) {
          // ensure the json data is an array
          if (!jsonObj.get("childrenAxisSections").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `childrenAxisSections` to be an array in the JSON string but got `%s`", jsonObj.get("childrenAxisSections").toString()));
          }

          // validate the optional field `childrenAxisSections` (array)
          for (int i = 0; i < jsonArraychildrenAxisSections.size(); i++) {
            AxisSectionTreeless.validateJsonObject(jsonArraychildrenAxisSections.get(i).getAsJsonObject());
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AxisSection.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AxisSection' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AxisSection> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AxisSection.class));

       return (TypeAdapter<T>) new TypeAdapter<AxisSection>() {
           @Override
           public void write(JsonWriter out, AxisSection value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public AxisSection read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             AxisSection instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of AxisSection given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of AxisSection
  * @throws IOException if the JSON string is invalid with respect to AxisSection
  */
  public static AxisSection fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AxisSection.class);
  }

 /**
  * Convert an instance of AxisSection to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

