/*
 * Organization structure API
 * Welcome on the documentation for the Organization Structure API 
 *
 * The version of the OpenAPI document: 1.0
 * Contact: developers@lucca.fr
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.net.URI;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * AxisTreeless
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class AxisTreeless {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private URI url;

  public static final String SERIALIZED_NAME_MULTILINGUAL_NAME = "multilingualName";
  @SerializedName(SERIALIZED_NAME_MULTILINGUAL_NAME)
  private String multilingualName;

  public static final String SERIALIZED_NAME_POSITION = "position";
  @SerializedName(SERIALIZED_NAME_POSITION)
  private Integer position = 0;

  public static final String SERIALIZED_NAME_PARENT_AXIS_ID = "parentAxisId";
  @SerializedName(SERIALIZED_NAME_PARENT_AXIS_ID)
  private Object parentAxisId = null;

  public static final String SERIALIZED_NAME_IS_ACTIVE = "isActive";
  @SerializedName(SERIALIZED_NAME_IS_ACTIVE)
  private Boolean isActive = true;

  public static final String SERIALIZED_NAME_IS_READ_ONLY = "isReadOnly";
  @SerializedName(SERIALIZED_NAME_IS_READ_ONLY)
  private Boolean isReadOnly = false;

  public static final String SERIALIZED_NAME_IS_N_N_RELATION = "isNNRelation";
  @SerializedName(SERIALIZED_NAME_IS_N_N_RELATION)
  private Boolean isNNRelation = false;

  public static final String SERIALIZED_NAME_LEVEL = "level";
  @SerializedName(SERIALIZED_NAME_LEVEL)
  private Integer level = 0;

  public AxisTreeless() {
  }

  
  public AxisTreeless(
     Integer id, 
     String name, 
     URI url, 
     Boolean isReadOnly, 
     Integer level
  ) {
    this();
    this.id = id;
    this.name = name;
    this.url = url;
    this.isReadOnly = isReadOnly;
    this.level = level;
  }

   /**
   * Get id
   * minimum: 0
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getId() {
    return id;
  }




   /**
   * Get name
   * @return name
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getName() {
    return name;
  }




   /**
   * Get url
   * @return url
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public URI getUrl() {
    return url;
  }




  public AxisTreeless multilingualName(String multilingualName) {
    
    
    
    
    this.multilingualName = multilingualName;
    return this;
  }

   /**
   * Get multilingualName
   * @return multilingualName
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public String getMultilingualName() {
    return multilingualName;
  }


  public void setMultilingualName(String multilingualName) {
    
    
    
    this.multilingualName = multilingualName;
  }


  public AxisTreeless position(Integer position) {
    if (position != null && position < 0) {
      throw new IllegalArgumentException("Invalid value for position. Must be greater than or equal to 0.");
    }
    
    
    
    this.position = position;
    return this;
  }

   /**
   * Get position
   * minimum: 0
   * @return position
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "0", value = "")

  public Integer getPosition() {
    return position;
  }


  public void setPosition(Integer position) {
    if (position != null && position < 0) {
      throw new IllegalArgumentException("Invalid value for position. Must be greater than or equal to 0.");
    }
    
    
    this.position = position;
  }


  public AxisTreeless parentAxisId(Object parentAxisId) {
    if (parentAxisId != null && parentAxisId < 0) {
      throw new IllegalArgumentException("Invalid value for parentAxisId. Must be greater than or equal to 0.");
    }
    
    
    
    this.parentAxisId = parentAxisId;
    return this;
  }

   /**
   * Get parentAxisId
   * minimum: 0
   * @return parentAxisId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Object getParentAxisId() {
    return parentAxisId;
  }


  public void setParentAxisId(Object parentAxisId) {
    if (parentAxisId != null && parentAxisId < 0) {
      throw new IllegalArgumentException("Invalid value for parentAxisId. Must be greater than or equal to 0.");
    }
    
    
    this.parentAxisId = parentAxisId;
  }


  public AxisTreeless isActive(Boolean isActive) {
    
    
    
    
    this.isActive = isActive;
    return this;
  }

   /**
   * Get isActive
   * @return isActive
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "true", value = "")

  public Boolean getIsActive() {
    return isActive;
  }


  public void setIsActive(Boolean isActive) {
    
    
    
    this.isActive = isActive;
  }


   /**
   * Get isReadOnly
   * @return isReadOnly
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "false", value = "")

  public Boolean getIsReadOnly() {
    return isReadOnly;
  }




  public AxisTreeless isNNRelation(Boolean isNNRelation) {
    
    
    
    
    this.isNNRelation = isNNRelation;
    return this;
  }

   /**
   * Get isNNRelation
   * @return isNNRelation
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "false", value = "")

  public Boolean getIsNNRelation() {
    return isNNRelation;
  }


  public void setIsNNRelation(Boolean isNNRelation) {
    
    
    
    this.isNNRelation = isNNRelation;
  }


   /**
   * Get level
   * @return level
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "0", value = "")

  public Integer getLevel() {
    return level;
  }



  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the AxisTreeless instance itself
   */
  public AxisTreeless putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AxisTreeless axisTreeless = (AxisTreeless) o;
    return Objects.equals(this.id, axisTreeless.id) &&
        Objects.equals(this.name, axisTreeless.name) &&
        Objects.equals(this.url, axisTreeless.url) &&
        Objects.equals(this.multilingualName, axisTreeless.multilingualName) &&
        Objects.equals(this.position, axisTreeless.position) &&
        Objects.equals(this.parentAxisId, axisTreeless.parentAxisId) &&
        Objects.equals(this.isActive, axisTreeless.isActive) &&
        Objects.equals(this.isReadOnly, axisTreeless.isReadOnly) &&
        Objects.equals(this.isNNRelation, axisTreeless.isNNRelation) &&
        Objects.equals(this.level, axisTreeless.level)&&
        Objects.equals(this.additionalProperties, axisTreeless.additionalProperties);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, name, url, multilingualName, position, parentAxisId, isActive, isReadOnly, isNNRelation, level, additionalProperties);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AxisTreeless {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    multilingualName: ").append(toIndentedString(multilingualName)).append("\n");
    sb.append("    position: ").append(toIndentedString(position)).append("\n");
    sb.append("    parentAxisId: ").append(toIndentedString(parentAxisId)).append("\n");
    sb.append("    isActive: ").append(toIndentedString(isActive)).append("\n");
    sb.append("    isReadOnly: ").append(toIndentedString(isReadOnly)).append("\n");
    sb.append("    isNNRelation: ").append(toIndentedString(isNNRelation)).append("\n");
    sb.append("    level: ").append(toIndentedString(level)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("name");
    openapiFields.add("url");
    openapiFields.add("multilingualName");
    openapiFields.add("position");
    openapiFields.add("parentAxisId");
    openapiFields.add("isActive");
    openapiFields.add("isReadOnly");
    openapiFields.add("isNNRelation");
    openapiFields.add("level");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("multilingualName");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to AxisTreeless
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!AxisTreeless.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AxisTreeless is not found in the empty JSON string", AxisTreeless.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AxisTreeless.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("url") != null && !jsonObj.get("url").isJsonNull()) && !jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
      if (!jsonObj.get("multilingualName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `multilingualName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("multilingualName").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AxisTreeless.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AxisTreeless' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AxisTreeless> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AxisTreeless.class));

       return (TypeAdapter<T>) new TypeAdapter<AxisTreeless>() {
           @Override
           public void write(JsonWriter out, AxisTreeless value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public AxisTreeless read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             AxisTreeless instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of AxisTreeless given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of AxisTreeless
  * @throws IOException if the JSON string is invalid with respect to AxisTreeless
  */
  public static AxisTreeless fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AxisTreeless.class);
  }

 /**
  * Convert an instance of AxisTreeless to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

