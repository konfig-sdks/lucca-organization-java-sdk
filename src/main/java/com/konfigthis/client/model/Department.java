/*
 * Organization structure API
 * Welcome on the documentation for the Organization Structure API 
 *
 * The version of the OpenAPI document: 1.0
 * Contact: developers@lucca.fr
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.User;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * Departments, to which users must be attached, are used by the different Lucca solutions for different purposes:  * Define access scopes: for example to restrict the visibility of absences in the Timmi Absences schedule. * Filtering data in a report: our different reports generally allow to filter data according to the legal entity, the SSC, but also the department of the user. * Build the organization chart in Poplee Core HR. The departments are represented as a hierarchical tree with a parent/child relationship.  *NB:* You can have up to 9 levels of departments, and up to 99 departments under a single parent department. However, limiting the number of levels to 7 is recommended.
 */
@ApiModel(description = "Departments, to which users must be attached, are used by the different Lucca solutions for different purposes:  * Define access scopes: for example to restrict the visibility of absences in the Timmi Absences schedule. * Filtering data in a report: our different reports generally allow to filter data according to the legal entity, the SSC, but also the department of the user. * Build the organization chart in Poplee Core HR. The departments are represented as a hierarchical tree with a parent/child relationship.  *NB:* You can have up to 9 levels of departments, and up to 99 departments under a single parent department. However, limiting the number of levels to 7 is recommended.")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class Department {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_CODE = "code";
  @SerializedName(SERIALIZED_NAME_CODE)
  private String code;

  public static final String SERIALIZED_NAME_HIERARCHY = "hierarchy";
  @SerializedName(SERIALIZED_NAME_HIERARCHY)
  private String hierarchy;

  public static final String SERIALIZED_NAME_PARENT_ID = "parentId";
  @SerializedName(SERIALIZED_NAME_PARENT_ID)
  private String parentId;

  public static final String SERIALIZED_NAME_IS_ACTIVE = "isActive";
  @SerializedName(SERIALIZED_NAME_IS_ACTIVE)
  private Boolean isActive;

  public static final String SERIALIZED_NAME_POSITION = "position";
  @SerializedName(SERIALIZED_NAME_POSITION)
  private Integer position;

  public static final String SERIALIZED_NAME_LEVEL = "level";
  @SerializedName(SERIALIZED_NAME_LEVEL)
  private Integer level;

  public static final String SERIALIZED_NAME_SORT_ORDER = "sortOrder";
  @SerializedName(SERIALIZED_NAME_SORT_ORDER)
  private Integer sortOrder;

  public static final String SERIALIZED_NAME_HEAD_I_D = "headID";
  @SerializedName(SERIALIZED_NAME_HEAD_I_D)
  private Integer headID;

  public static final String SERIALIZED_NAME_HEAD = "head";
  @SerializedName(SERIALIZED_NAME_HEAD)
  private User head;

  public static final String SERIALIZED_NAME_USERS = "users";
  @SerializedName(SERIALIZED_NAME_USERS)
  private List<User> users = null;

  public static final String SERIALIZED_NAME_CURRENT_USERS = "currentUsers";
  @SerializedName(SERIALIZED_NAME_CURRENT_USERS)
  private List<User> currentUsers = null;

  public static final String SERIALIZED_NAME_CURRENT_USERS_COUNT = "currentUsersCount";
  @SerializedName(SERIALIZED_NAME_CURRENT_USERS_COUNT)
  private Integer currentUsersCount;

  public Department() {
  }

  
  public Department(
     Integer id, 
     Integer currentUsersCount
  ) {
    this();
    this.id = id;
    this.currentUsersCount = currentUsersCount;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2", value = "")

  public Integer getId() {
    return id;
  }




  public Department name(String name) {
    
    
    
    
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "Administration", required = true, value = "")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    
    
    
    this.name = name;
  }


  public Department code(String code) {
    
    
    
    
    this.code = code;
    return this;
  }

   /**
   * Get code
   * @return code
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "Administration", required = true, value = "")

  public String getCode() {
    return code;
  }


  public void setCode(String code) {
    
    
    
    this.code = code;
  }


  public Department hierarchy(String hierarchy) {
    
    
    
    
    this.hierarchy = hierarchy;
    return this;
  }

   /**
   * Position of the departement in the hierarchical tree
   * @return hierarchy
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "/1.0/", value = "Position of the departement in the hierarchical tree")

  public String getHierarchy() {
    return hierarchy;
  }


  public void setHierarchy(String hierarchy) {
    
    
    
    this.hierarchy = hierarchy;
  }


  public Department parentId(String parentId) {
    
    
    
    
    this.parentId = parentId;
    return this;
  }

   /**
   * Position of the parent department in the hierarchical tree
   * @return parentId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "/", value = "Position of the parent department in the hierarchical tree")

  public String getParentId() {
    return parentId;
  }


  public void setParentId(String parentId) {
    
    
    
    this.parentId = parentId;
  }


  public Department isActive(Boolean isActive) {
    
    
    
    
    this.isActive = isActive;
    return this;
  }

   /**
   * Get isActive
   * @return isActive
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "true", value = "")

  public Boolean getIsActive() {
    return isActive;
  }


  public void setIsActive(Boolean isActive) {
    
    
    
    this.isActive = isActive;
  }


  public Department position(Integer position) {
    if (position != null && position < -8446744073709551616) {
      throw new IllegalArgumentException("Invalid value for position. Must be greater than or equal to -8446744073709551616.");
    }
    if (position != null && position > 7766279631452241920) {
      throw new IllegalArgumentException("Invalid value for position. Must be less than or equal to 7766279631452241920.");
    }
    
    
    this.position = position;
    return this;
  }

   /**
   * Department&#39;s general position in the hierarchy
   * minimum: -8446744073709551616
   * maximum: 7766279631452241920
   * @return position
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Department's general position in the hierarchy")

  public Integer getPosition() {
    return position;
  }


  public void setPosition(Integer position) {
    if (position != null && position < -8446744073709551616) {
      throw new IllegalArgumentException("Invalid value for position. Must be greater than or equal to -8446744073709551616.");
    }
    if (position != null && position > 7766279631452241920) {
      throw new IllegalArgumentException("Invalid value for position. Must be less than or equal to 7766279631452241920.");
    }
    
    this.position = position;
  }


  public Department level(Integer level) {
    
    
    
    
    this.level = level;
    return this;
  }

   /**
   * level of the Department. Deduce from Position.
   * @return level
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "1", value = "level of the Department. Deduce from Position.")

  public Integer getLevel() {
    return level;
  }


  public void setLevel(Integer level) {
    
    
    
    this.level = level;
  }


  public Department sortOrder(Integer sortOrder) {
    if (sortOrder != null && sortOrder < 1) {
      throw new IllegalArgumentException("Invalid value for sortOrder. Must be greater than or equal to 1.");
    }
    
    
    
    this.sortOrder = sortOrder;
    return this;
  }

   /**
   * Order of the current Department among the children of the Parent Department
   * minimum: 1
   * @return sortOrder
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "1", value = "Order of the current Department among the children of the Parent Department")

  public Integer getSortOrder() {
    return sortOrder;
  }


  public void setSortOrder(Integer sortOrder) {
    if (sortOrder != null && sortOrder < 1) {
      throw new IllegalArgumentException("Invalid value for sortOrder. Must be greater than or equal to 1.");
    }
    
    
    this.sortOrder = sortOrder;
  }


  public Department headID(Integer headID) {
    
    
    
    
    this.headID = headID;
    return this;
  }

   /**
   * ID of the User who is the head of the department
   * @return headID
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "ID of the User who is the head of the department")

  public Integer getHeadID() {
    return headID;
  }


  public void setHeadID(Integer headID) {
    
    
    
    this.headID = headID;
  }


  public Department head(User head) {
    
    
    
    
    this.head = head;
    return this;
  }

   /**
   * Get head
   * @return head
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public User getHead() {
    return head;
  }


  public void setHead(User head) {
    
    
    
    this.head = head;
  }


  public Department users(List<User> users) {
    
    
    
    
    this.users = users;
    return this;
  }

  public Department addUsersItem(User usersItem) {
    if (this.users == null) {
      this.users = new ArrayList<>();
    }
    this.users.add(usersItem);
    return this;
  }

   /**
   * Users of the department, including inactive users.
   * @return users
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Users of the department, including inactive users.")

  public List<User> getUsers() {
    return users;
  }


  public void setUsers(List<User> users) {
    
    
    
    this.users = users;
  }


  public Department currentUsers(List<User> currentUsers) {
    
    
    
    
    this.currentUsers = currentUsers;
    return this;
  }

  public Department addCurrentUsersItem(User currentUsersItem) {
    if (this.currentUsers == null) {
      this.currentUsers = new ArrayList<>();
    }
    this.currentUsers.add(currentUsersItem);
    return this;
  }

   /**
   * Only active users of the department
   * @return currentUsers
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Only active users of the department")

  public List<User> getCurrentUsers() {
    return currentUsers;
  }


  public void setCurrentUsers(List<User> currentUsers) {
    
    
    
    this.currentUsers = currentUsers;
  }


   /**
   * Number of active users in the department
   * minimum: 0
   * @return currentUsersCount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Number of active users in the department")

  public Integer getCurrentUsersCount() {
    return currentUsersCount;
  }



  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the Department instance itself
   */
  public Department putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Department department = (Department) o;
    return Objects.equals(this.id, department.id) &&
        Objects.equals(this.name, department.name) &&
        Objects.equals(this.code, department.code) &&
        Objects.equals(this.hierarchy, department.hierarchy) &&
        Objects.equals(this.parentId, department.parentId) &&
        Objects.equals(this.isActive, department.isActive) &&
        Objects.equals(this.position, department.position) &&
        Objects.equals(this.level, department.level) &&
        Objects.equals(this.sortOrder, department.sortOrder) &&
        Objects.equals(this.headID, department.headID) &&
        Objects.equals(this.head, department.head) &&
        Objects.equals(this.users, department.users) &&
        Objects.equals(this.currentUsers, department.currentUsers) &&
        Objects.equals(this.currentUsersCount, department.currentUsersCount)&&
        Objects.equals(this.additionalProperties, department.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, name, code, hierarchy, parentId, isActive, position, level, sortOrder, headID, head, users, currentUsers, currentUsersCount, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Department {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    code: ").append(toIndentedString(code)).append("\n");
    sb.append("    hierarchy: ").append(toIndentedString(hierarchy)).append("\n");
    sb.append("    parentId: ").append(toIndentedString(parentId)).append("\n");
    sb.append("    isActive: ").append(toIndentedString(isActive)).append("\n");
    sb.append("    position: ").append(toIndentedString(position)).append("\n");
    sb.append("    level: ").append(toIndentedString(level)).append("\n");
    sb.append("    sortOrder: ").append(toIndentedString(sortOrder)).append("\n");
    sb.append("    headID: ").append(toIndentedString(headID)).append("\n");
    sb.append("    head: ").append(toIndentedString(head)).append("\n");
    sb.append("    users: ").append(toIndentedString(users)).append("\n");
    sb.append("    currentUsers: ").append(toIndentedString(currentUsers)).append("\n");
    sb.append("    currentUsersCount: ").append(toIndentedString(currentUsersCount)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("name");
    openapiFields.add("code");
    openapiFields.add("hierarchy");
    openapiFields.add("parentId");
    openapiFields.add("isActive");
    openapiFields.add("position");
    openapiFields.add("level");
    openapiFields.add("sortOrder");
    openapiFields.add("headID");
    openapiFields.add("head");
    openapiFields.add("users");
    openapiFields.add("currentUsers");
    openapiFields.add("currentUsersCount");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("code");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to Department
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!Department.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Department is not found in the empty JSON string", Department.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Department.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (!jsonObj.get("code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("code").toString()));
      }
      if ((jsonObj.get("hierarchy") != null && !jsonObj.get("hierarchy").isJsonNull()) && !jsonObj.get("hierarchy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hierarchy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hierarchy").toString()));
      }
      if ((jsonObj.get("parentId") != null && !jsonObj.get("parentId").isJsonNull()) && !jsonObj.get("parentId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `parentId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("parentId").toString()));
      }
      // validate the optional field `head`
      if (jsonObj.get("head") != null && !jsonObj.get("head").isJsonNull()) {
        User.validateJsonObject(jsonObj.getAsJsonObject("head"));
      }
      if (jsonObj.get("users") != null && !jsonObj.get("users").isJsonNull()) {
        JsonArray jsonArrayusers = jsonObj.getAsJsonArray("users");
        if (jsonArrayusers != null) {
          // ensure the json data is an array
          if (!jsonObj.get("users").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `users` to be an array in the JSON string but got `%s`", jsonObj.get("users").toString()));
          }

          // validate the optional field `users` (array)
          for (int i = 0; i < jsonArrayusers.size(); i++) {
            User.validateJsonObject(jsonArrayusers.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("currentUsers") != null && !jsonObj.get("currentUsers").isJsonNull()) {
        JsonArray jsonArraycurrentUsers = jsonObj.getAsJsonArray("currentUsers");
        if (jsonArraycurrentUsers != null) {
          // ensure the json data is an array
          if (!jsonObj.get("currentUsers").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `currentUsers` to be an array in the JSON string but got `%s`", jsonObj.get("currentUsers").toString()));
          }

          // validate the optional field `currentUsers` (array)
          for (int i = 0; i < jsonArraycurrentUsers.size(); i++) {
            User.validateJsonObject(jsonArraycurrentUsers.get(i).getAsJsonObject());
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Department.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Department' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Department> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Department.class));

       return (TypeAdapter<T>) new TypeAdapter<Department>() {
           @Override
           public void write(JsonWriter out, Department value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public Department read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             Department instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Department given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Department
  * @throws IOException if the JSON string is invalid with respect to Department
  */
  public static Department fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Department.class);
  }

 /**
  * Convert an instance of Department to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

