/*
 * Organization structure API
 * Welcome on the documentation for the Organization Structure API 
 *
 * The version of the OpenAPI document: 1.0
 * Contact: developers@lucca.fr
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.AxisSection;
import com.konfigthis.client.model.AxisSectionTreeless;
import com.konfigthis.client.model.AxissectionsCreateNewAxisSectionResponse;
import com.konfigthis.client.model.AxissectionsGetByIdResponse;
import com.konfigthis.client.model.AxissectionsList200Response;
import com.konfigthis.client.model.AxissectionsListResponse;
import com.konfigthis.client.model.AxissectionsUpdateByIdResponse;
import java.net.URI;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for AxisSectionsApi
 */
@Disabled
public class AxisSectionsApiTest {

    private static AxisSectionsApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new AxisSectionsApi(apiClient);
    }

    /**
     * Create a new AxisSection
     *
     * Create a new AxisSection.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createNewAxisSectionTest() throws ApiException {
        Object description = null;
        Integer id = null;
        String name = null;
        URI url = null;
        String code = null;
        String multilingualName = null;
        Object ownerId = null;
        Object startOn = null;
        Object endOn = null;
        Boolean active = null;
        Integer axisId = null;
        List<AxisSectionTreeless> parentAxisSections = null;
        List<AxisSectionTreeless> childrenAxisSections = null;
        AxissectionsCreateNewAxisSectionResponse response = api.createNewAxisSection()
                .description(description)
                .id(id)
                .name(name)
                .url(url)
                .code(code)
                .multilingualName(multilingualName)
                .ownerId(ownerId)
                .startOn(startOn)
                .endOn(endOn)
                .active(active)
                .axisId(axisId)
                .parentAxisSections(parentAxisSections)
                .childrenAxisSections(childrenAxisSections)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete an AxisSection by id
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteByIdTest() throws ApiException {
        Integer axisSectionId = null;
        api.deleteById(axisSectionId)
                .execute();
        // TODO: test validations
    }

    /**
     * Get an AxisSection by id
     *
     * Retrieve a single AxisSection by its unique identifier.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getByIdTest() throws ApiException {
        Integer axisSectionId = null;
        AxissectionsGetByIdResponse response = api.getById(axisSectionId)
                .execute();
        // TODO: test validations
    }

    /**
     * List Axes
     *
     * List all Axes satisfying query filters.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listTest() throws ApiException {
        String paging = null;
        List<Integer> id = null;
        Boolean isActive = null;
        AxissectionsListResponse response = api.list(paging)
                .id(id)
                .isActive(isActive)
                .execute();
        // TODO: test validations
    }

    /**
     * List AxisSections
     *
     * List all AxisSections satisfying query filters.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void list_0Test() throws ApiException {
        String paging = null;
        List<Integer> axisId = null;
        List<Integer> ownerId = null;
        Boolean active = null;
        AxissectionsList200Response response = api.list_0(paging)
                .axisId(axisId)
                .ownerId(ownerId)
                .active(active)
                .execute();
        // TODO: test validations
    }

    /**
     * Update an AxisSection by id
     *
     * Partial or complete update to an existing AxisSection.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateByIdTest() throws ApiException {
        Integer axisSectionId = null;
        Object description = null;
        Integer id = null;
        String name = null;
        URI url = null;
        String code = null;
        String multilingualName = null;
        Object ownerId = null;
        Object startOn = null;
        Object endOn = null;
        Boolean active = null;
        Integer axisId = null;
        List<AxisSectionTreeless> parentAxisSections = null;
        List<AxisSectionTreeless> childrenAxisSections = null;
        AxissectionsUpdateByIdResponse response = api.updateById(axisSectionId)
                .description(description)
                .id(id)
                .name(name)
                .url(url)
                .code(code)
                .multilingualName(multilingualName)
                .ownerId(ownerId)
                .startOn(startOn)
                .endOn(endOn)
                .active(active)
                .axisId(axisId)
                .parentAxisSections(parentAxisSections)
                .childrenAxisSections(childrenAxisSections)
                .execute();
        // TODO: test validations
    }

}
